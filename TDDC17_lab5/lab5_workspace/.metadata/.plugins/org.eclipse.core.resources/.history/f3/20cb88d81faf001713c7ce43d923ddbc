public class StateAndReward {

	
	/* State discretization function for the angle controller */
	public static String getStateAngle(double angle, double vx, double vy) {
		/* TODO: IMPLEMENT THIS FUNCTION */

		String state = "AngleUnknown";
		if (angle < 0.05 && angle > -0.05) {
			// Straight up
			state = "AnglePointingUp";
		}
		else if (angle > 0 && angle < Math.PI/2) {
			// First quadrant
			state = "AngleFirst";
		}
		else if (angle < 0 && angle >= -Math.PI/2) {
			// Second quadrant
			state = "AngleSecond";
		}
		else if (angle < -Math.PI/2 && angle >= -Math.PI) {
			// Third quadrant
			state = "AngleThird";
		}
		else if (angle >= Math.PI/2 && angle <= Math.PI) {
			// Fourth quadrant
			state = "AngleFourth";
		}
		return state;
		
	}

	/* Reward function for the angle controller */
	public static double getRewardAngle(double angle, double vx, double vy) {

		/* TODO: IMPLEMENT THIS FUNCTION */
			
		double reward = 0;
		if (angle < 0.05 && angle > -0.05) {
			// Straight up
			reward = 1;
		}
		else if (angle > 0 && angle < Math.PI/2 || angle < 0 && angle >= -Math.PI/2) {
			// First quadrant or Second quadrant
			reward = 0;
		}
		else if (angle < -Math.PI/2 && angle >= -Math.PI || angle >= Math.PI/2 && angle <= Math.PI) {
			// Third quadrant or Fourth quadrant
			reward = -1;
		}
		return reward;
	}

	/* State discretization function for the full hover controller */
	public static String getStateHover(double angle, double vx, double vy) {

		/* TODO: IMPLEMENT THIS FUNCTION */

		String state = "AngleUnknown";
		String vely = "VyUnknown";
		String velx = "VxUnknown";
		
	/*
		switch (discretize2(angle, 5, 0, angle)) {
			case 0:
				
		} */
		if (Math.abs(angle) < 0.05) {
			// Straight up
			vely = getVy(vy);
			velx = getVx(vx);
			state = "AngleStraightUp";
		}
		else if (Math.abs(angle) < Math.PI/12) {
			// First quadrant
			vely = getVy(vy);
			velx = getVx(vx);
			state = "AngleTop30";
		}
		else if (Math.abs(angle) < Math.PI/6) {
			// First quadrant
			vely = getVy(vy);
			velx = getVx(vx);
			state = "AngleTop60";
		}
		else if (Math.abs(angle) < Math.PI/3) {
			// First quadrant
			vely = getVy(vy);
			velx = getVx(vx);
			state = "AngleTop120";
		}
		else if (Math.abs(angle) < Math.PI/2) {
			// First quadrant
			vely = getVy(vy);
			velx = getVx(vx);
			state = "AngleTop180";
		}
		else if (angle < -Math.PI/2 && angle >= -Math.PI || angle >= Math.PI/2 && angle <= Math.PI) {
			// Third quadrant
			vely = getVy(vy);
			velx = getVx(vx);
			state = "AngleDown";
		}
		return state + vely + velx;

	}
	
	/*public static String getVelocity(double vx, double vy) {
		String result = "no result";
		
		if (Math.abs(vx) < 0.7 && Math.abs(vy) < 0.4) {
			result = "VelocityHover";
		}
		else if (Math.abs(vx) < 2.0 && Math.abs(vy) < 1.0 ) {
			result = "VelocityNear";
		}
		else {
			result = "Velocity2High";
		}
		return result;
	}*/
	
	public static String getVy(double vy) {
		String result = "no vy";
		
		if (Math.abs(vy) < 0.4) {
			result = "VyHover";			
		}
		else if (Math.abs(vy) < 0.9) {
			result = "VyNear";
		}
		else if (Math.abs(vy) < 2.0) {
			result = "Vy2High";
		}
		else if (Math.abs(vy) < 3.0) {
			result = "VyWay3High";
		}
		else {
			result = "VyInfinite";
		}
		return result;
	}
	
	public static String getVx(double vx) {
		String result = "no vx";
		
		if (Math.abs(vx) < 0.7) {
			result = "VxHover";
		}
		else if (Math.abs(vx) < 2) {
			result = "VxNear";
		}
		else {
			result = "Vx2High";
		}
		return result;
	}

	/* Reward function for the full hover controller */
	public static double getRewardHover(double angle, double vx, double vy) {

		/* TODO: IMPLEMENT THIS FUNCTION */
		
		double reward = 0;
		
		if (Math.abs(angle) < 0.05) {
			// Straight up
			reward += 20;
			reward += vyReward(vx, vy);
			reward += vxReward(vx);
		}
		else if (Math.abs(angle) < Math.PI/12) {
			// Up
			reward += 5;
			reward += vyReward(vx, vy);
			reward += vxReward(vx);

		}
		else if (Math.abs(angle) < Math.PI/6) {
			// Up
			reward += 3;
			reward += vyReward(vx, vy);
			reward += vxReward(vx);

		}
		else if (Math.abs(angle) < Math.PI/3) {
			// Up
			reward += 2;
			reward += vyReward(vx, vy);
			reward += vxReward(vx);

		}
		else if (Math.abs(angle) < Math.PI/2) {
			// Up
			reward += 1;
			reward += vyReward(vx, vy);
			reward += vxReward(vx);

		}
		else if (angle < -Math.PI/2 && angle >= -Math.PI || angle >= Math.PI/2 && angle <= Math.PI) {
			// Down
			reward += 0;
			reward += vyReward(vx, vy);
			reward += vxReward(vx);
		}
		return reward;
	}
	
	public static double vyReward(double vx, double vy) {
		double reward = 0;
		if (Math.abs(vy) < 0.4) {
			reward += 10;
		}
		else if (Math.abs(vy) < 0.9) {
			reward += 5;
		}
		else if (Math.abs(vy) < 2.0) {
			reward += 3;
		}
		else if (Math.abs(vy) < 3.0) {
			reward += 1;
		}
		else {
			reward += 0;
		}
		return reward;
	}
	
	public static double vxReward(double vx) {
		
		double reward = 0;
		if (Math.abs(vx) < 0.7) {
			reward += 2;
		}
		else if (Math.abs(vx) < 2) {
			reward += 1;
		}
		else {
			reward += 0;
		}
		
		return reward;
	}
	
	
	/*
	// First quadrant (unit circle)
if (vx >= 0 & vy <= 0) {
	// velocity vector in first quadrant
	result = "VelocityFirst";
}
else if (vx < 0 & vy <= 0) {
	// velocity vector in second quadrant
	result = "VelocitySecond";
}
else if (vx <= 0 & vy > 0) {
	// velocity vector in third quadrant
	result = "VelocityThird";
}
else if (vx > 0 & vy > 0) {
	// velocity vector in fourth quadrant
	result = "VelocityFourth";
}
*/

	// ///////////////////////////////////////////////////////////
	// discretize() performs a uniform discretization of the
	// value parameter.
	// It returns an integer between 0 and nrValues-1.
	// The min and max parameters are used to specify the interval
	// for the discretization.
	// If the value is lower than min, 0 is returned
	// If the value is higher than min, nrValues-1 is returned
	// otherwise a value between 1 and nrValues-2 is returned.
	//
	// Use discretize2() if you want a discretization method that does
	// not handle values lower than min and higher than max.
	// ///////////////////////////////////////////////////////////
	public static int discretize(double value, int nrValues, double min,
			double max) {
		if (nrValues < 2) {
			return 0;
		}

		double diff = max - min;

		if (value < min) {
			return 0;
		}
		if (value > max) {
			return nrValues - 1;
		}

		double tempValue = value - min;
		double ratio = tempValue / diff;

		return (int) (ratio * (nrValues - 2)) + 1;
	}

	// ///////////////////////////////////////////////////////////
	// discretize2() performs a uniform discretization of the
	// value parameter.
	// It returns an integer between 0 and nrValues-1.
	// The min and max parameters are used to specify the interval
	// for the discretization.
	// If the value is lower than min, 0 is returned
	// If the value is higher than min, nrValues-1 is returned
	// otherwise a value between 0 and nrValues-1 is returned.
	// ///////////////////////////////////////////////////////////
	public static int discretize2(double value, int nrValues, double min,
			double max) {
		double diff = max - min;

		if (value < min) {
			return 0;
		}
		if (value > max) {
			return nrValues - 1;
		}

		double tempValue = value - min;
		double ratio = tempValue / diff;

		return (int) (ratio * nrValues);
	}

}
