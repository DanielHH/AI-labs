public class StateAndReward {

	
	/* State discretization function for the angle controller */
	public static String getStateAngle(double angle, double vx, double vy) {
		/* TODO: IMPLEMENT THIS FUNCTION */

		String state = "AngleUnknown";
		if (angle < 0.05 && angle > -0.05) {
			// Straight up
			state = "AnglePointingUp";
		}
		else if (angle > 0 && angle < Math.PI/2) {
			// First quadrant
			state = "AngleFirst";
		}
		else if (angle < 0 && angle >= -Math.PI/2) {
			// Second quadrant
			state = "AngleSecond";
		}
		else if (angle < -Math.PI/2 && angle >= -Math.PI) {
			// Third quadrant
			state = "AngleThird";
		}
		else if (angle >= Math.PI/2 && angle <= Math.PI) {
			// Fourth quadrant
			state = "AngleFourth";
		}
		return state;
		
	}

	/* Reward function for the angle controller */
	public static double getRewardAngle(double angle, double vx, double vy) {

		/* TODO: IMPLEMENT THIS FUNCTION */
			
		double reward = 0;
		if (angle < 0.05 && angle > -0.05) {
			// Straight up
			reward = 1;
		}
		else if (angle > 0 && angle < Math.PI/2 || angle < 0 && angle >= -Math.PI/2) {
			// First quadrant or Second quadrant
			reward = 0;
		}
		else if (angle < -Math.PI/2 && angle >= -Math.PI || angle >= Math.PI/2 && angle <= Math.PI) {
			// Third quadrant or Fourth quadrant
			reward = -1;
		}
		return reward;
	}

	/* State discretization function for the full hover controller */
	public static String getStateHover(double angle, double vx, double vy) {

		/* TODO: IMPLEMENT THIS FUNCTION */

		String state = "AngleUnknown";
		String velocityQuadrant = "VelocityUnknown";
		
	/*	
		if (angle < 0.05 && angle > -0.05) {
			// Straight up
			velocityQuadrant = getVelocityVectorQuadrant(vx, vy);
			state = "AnglePointingUp";
		}
		else if (angle > 0 && angle < Math.PI/2) {
			// First quadrant
			velocityQuadrant = getVelocityVectorQuadrant(vx, vy);
			state = "AngleFirst";
		}
		else if (angle < 0 && angle >= -Math.PI/2) {
			// Second quadrant
			velocityQuadrant = getVelocityVectorQuadrant(vx, vy);
			state = "AngleSecond";
		}
		else if (angle < -Math.PI/2 && angle >= -Math.PI) {
			// Third quadrant
			velocityQuadrant = getVelocityVectorQuadrant(vx, vy);
			state = "AngleThird";
		}
		else if (angle >= Math.PI/2 && angle <= Math.PI) {
			// Fourth quadrant
			velocityQuadrant = getVelocityVectorQuadrant(vx, vy);
			state = "AngleFourth";
		}
		
		return state + velocityQuadrant;
*/
	}

	/* Reward function for the full hover controller */
	public static double getRewardHover(double angle, double vx, double vy) {

		/* TODO: IMPLEMENT THIS FUNCTION */
		
		double reward = 0;

		return reward;
	}
	/*
	public static String getVelocityVectorQuadrant(double vx, double vy) {
		String result = "no result";
		// First quadrant (unit circle)
		
		if (Math.abs(vx) < 0.7 && Math.abs(vy))
		
		if (vx >= 0 & vy <= 0) {
			// velocity vector in first quadrant
			result = "VelocityFirst";
		}
		else if (vx < 0 & vy <= 0) {
			// velocity vector in second quadrant
			result = "VelocitySecond";
		}
		else if (vx <= 0 & vy > 0) {
			// velocity vector in third quadrant
			result = "VelocityThird";
		}
		else if (vx > 0 & vy > 0) {
			// velocity vector in fourth quadrant
			result = "VelocityFourth";
		}
		return result;
	}*/

	// ///////////////////////////////////////////////////////////
	// discretize() performs a uniform discretization of the
	// value parameter.
	// It returns an integer between 0 and nrValues-1.
	// The min and max parameters are used to specify the interval
	// for the discretization.
	// If the value is lower than min, 0 is returned
	// If the value is higher than min, nrValues-1 is returned
	// otherwise a value between 1 and nrValues-2 is returned.
	//
	// Use discretize2() if you want a discretization method that does
	// not handle values lower than min and higher than max.
	// ///////////////////////////////////////////////////////////
	public static int discretize(double value, int nrValues, double min,
			double max) {
		if (nrValues < 2) {
			return 0;
		}

		double diff = max - min;

		if (value < min) {
			return 0;
		}
		if (value > max) {
			return nrValues - 1;
		}

		double tempValue = value - min;
		double ratio = tempValue / diff;

		return (int) (ratio * (nrValues - 2)) + 1;
	}

	// ///////////////////////////////////////////////////////////
	// discretize2() performs a uniform discretization of the
	// value parameter.
	// It returns an integer between 0 and nrValues-1.
	// The min and max parameters are used to specify the interval
	// for the discretization.
	// If the value is lower than min, 0 is returned
	// If the value is higher than min, nrValues-1 is returned
	// otherwise a value between 0 and nrValues-1 is returned.
	// ///////////////////////////////////////////////////////////
	public static int discretize2(double value, int nrValues, double min,
			double max) {
		double diff = max - min;

		if (value < min) {
			return 0;
		}
		if (value > max) {
			return nrValues - 1;
		}

		double tempValue = value - min;
		double ratio = tempValue / diff;

		return (int) (ratio * nrValues);
	}

}
