public class StateAndReward {

	
	/* State discretization function for the angle controller */
	public static String getStateAngle(double angle, double vx, double vy) {
		/* TODO: IMPLEMENT THIS FUNCTION */

		String state = "AngleUnknown";
		if (angle < 0.05 && angle > -0.05) {
			// Straight up
			state = "AnglePointingUp";
		}
		else if (angle > 0 && angle < Math.PI/2) {
			// First quadrant
			state = "AngleFirst";
		}
		else if (angle < 0 && angle >= -Math.PI/2) {
			// Second quadrant
			state = "AngleSecond";
		}
		else if (angle < -Math.PI/2 && angle >= -Math.PI) {
			// Third quadrant
			state = "AngleThird";
		}
		else if (angle >= Math.PI/2 && angle <= Math.PI) {
			// Fourth quadrant
			state = "AngleFourth";
		}
		return state;
		
	}

	/* Reward function for the angle controller */
	public static double getRewardAngle(double angle, double vx, double vy) {

		/* TODO: IMPLEMENT THIS FUNCTION */
			
		double reward = 0;
		if (angle < 0.05 && angle > -0.05) {
			// Straight up
			reward = 1;
		}
		else if (angle > 0 && angle < Math.PI/2 || angle < 0 && angle >= -Math.PI/2) {
			// First quadrant or Second quadrant
			reward = 0;
		}
		else if (angle < -Math.PI/2 && angle >= -Math.PI || angle >= Math.PI/2 && angle <= Math.PI) {
			// Third quadrant or Fourth quadrant
			reward = -1;
		}
		return reward;
	}

	/* State discretization function for the full hover controller */
	public static String getStateHover(double angle, double vx, double vy) {

		/* TODO: IMPLEMENT THIS FUNCTION */

		String state = "AngleUnknown";
		String vely = "VyUnknown";
		String velx = "VxUnknown";
		
		if (Math.abs(angle) < 0.05) {
			// Straight up		
			state = "AngleStraightUp";
		} else {
			switch (discretize2(Math.abs(angle), 9, 0, Math.PI)) {
				case 0:
					state = "angleTop20";
					break;
				case 1:
					state = "angleTop30";
					break;
				case 2:
					state = "angleTop40";
					break;	
				case 3:
					state = "angleTop50";
					break;
				case 4:
					state = "angleTop60";
					break;	
				case 5:
					state = "angleTop70";
					break;
				case 6:
					state = "angleTop80";
					break;	
				case 7:
					state = "angleTop90";
					break;
				case 8:
				default:
					state = "angleTop130";
					break;
			}		
		}
		vely = getVy(vy);
		//velx = getVx(vx);
		String turned = "left";
		if (angle >= 0) {
			turned = "right";
		}
		return state + turned + vely;

	}
	
	public static String getVy(double vy) {
		String result = "no vy";
		if (Math.abs(vy) < 0.8) {
			result = "VyHover";			
		} else {
			switch (discretize2(Math.abs(vy), 9, 0, 7)) {
				case 0:
					result = "Vy1";
					break;
				case 1:
					result = "Vy2";
					break;
				case 2:
					result = "Vy3";
					break;
				case 4:
					result = "Vy4";
					break;
				case 5:
					result = "Vy5";
					break;
				case 6:
					result = "Vy6";
					break;
				case 7:
					result = "Vy7";
					break;
				case 8:
				default:
					result = "Vy8";
					break;
			}
		}		
		String dir = "down";
		if (vy <= 0) {
			dir = "up";
		}
		return result + dir;
	}
	
	public static String getVx(double vx) {
		String result = "no vx";
		
		if (Math.abs(vx) < 0.7) {
			result = "VxHover";
		}
		else if (Math.abs(vx) < 2) {
			result = "VxNear";
		}
		else {
			result = "Vx2High";
		}
		return result;
	}

	/* Reward function for the full hover controller */
	public static double getRewardHover(double angle, double vx, double vy) {

		/* TODO: IMPLEMENT THIS FUNCTION */
		
		double reward = 0;
		if (Math.abs(angle) < 0.05) {
			// Straight up		
			reward += 20;
		} else {
			switch (discretize2(Math.abs(angle), 9, 0, Math.PI)) {
				case 0:
					reward += 10;
					break;
				case 1:
					reward += 5;
					break;
				case 2:
					reward += 1;
					break;	
				case 3:
					reward += 0;
					break;
				case 4:
					reward += 0;
					break;
				case 5:
					reward += 0;
					break;
				case 6:
					reward += 0;
					break;
				case 7:
					reward += 0;
					break;
				case 8:
				default:
					reward += 0;
					break;
			}		
		}
		reward += vyReward(vy);
		//reward += vxReward(vx);
		return reward;
	}
	
	public static double vyReward(double vy) {
		double reward = 0;
		if (Math.abs(vy) < 0.8) {
			reward += 100;			
		} else {
			switch (discretize2(Math.abs(vy), 9, 0, 7)) {
				case 0:
					reward += 3;
					break;
				case 1:
					reward += 2;
					break;
				case 2:
					reward += 1;
					break;
				case 3:
					reward += 0;
					break;
				case 4:
					reward += 0;
					break;
				case 5:
					reward += 0;
					break;
				case 6:
					reward += 0;
					break;
				case 7:
					reward += 0;
					break;
				case 8:
				default:
					reward += 0;
					break;
			}
		}
		return reward;
	}
	
	public static double vxReward(double vx) {
		
		double reward = 0;
		if (Math.abs(vx) < 0.7) {
			reward += 2;
		}
		else if (Math.abs(vx) < 2) {
			reward += 1;
		}
		else {
			reward += 0;
		}
		
		return reward;
	}
	
	
	/*
	// First quadrant (unit circle)
if (vx >= 0 & vy <= 0) {
	// velocity vector in first quadrant
	result = "VelocityFirst";
}
else if (vx < 0 & vy <= 0) {
	// velocity vector in second quadrant
	result = "VelocitySecond";
}
else if (vx <= 0 & vy > 0) {
	// velocity vector in third quadrant
	result = "VelocityThird";
}
else if (vx > 0 & vy > 0) {
	// velocity vector in fourth quadrant
	result = "VelocityFourth";
}
*/

	// ///////////////////////////////////////////////////////////
	// discretize() performs a uniform discretization of the
	// value parameter.
	// It returns an integer between 0 and nrValues-1.
	// The min and max parameters are used to specify the interval
	// for the discretization.
	// If the value is lower than min, 0 is returned
	// If the value is higher than min, nrValues-1 is returned
	// otherwise a value between 1 and nrValues-2 is returned.
	//
	// Use discretize2() if you want a discretization method that does
	// not handle values lower than min and higher than max.
	// ///////////////////////////////////////////////////////////
	public static int discretize(double value, int nrValues, double min,
			double max) {
		if (nrValues < 2) {
			return 0;
		}

		double diff = max - min;

		if (value < min) {
			return 0;
		}
		if (value > max) {
			return nrValues - 1;
		}

		double tempValue = value - min;
		double ratio = tempValue / diff;

		return (int) (ratio * (nrValues - 2)) + 1;
	}

	// ///////////////////////////////////////////////////////////
	// discretize2() performs a uniform discretization of the
	// value parameter.
	// It returns an integer between 0 and nrValues-1.
	// The min and max parameters are used to specify the interval
	// for the discretization.
	// If the value is lower than min, 0 is returned
	// If the value is higher than min, nrValues-1 is returned
	// otherwise a value between 0 and nrValues-1 is returned.
	// ///////////////////////////////////////////////////////////
	public static int discretize2(double value, int nrValues, double min,
			double max) {
		double diff = max - min;

		if (value < min) {
			return 0;
		}
		if (value > max) {
			return nrValues - 1;
		}

		double tempValue = value - min;
		double ratio = tempValue / diff;

		return (int) (ratio * nrValues);
	}

}
